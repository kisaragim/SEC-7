
# Use C++test 2021.1
name: CI-Test-2021

on:
#  push:

  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

jobs:
  test-cpptest:
    name: Analyze project with C/C++test
    runs-on: 3928

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Generate BDF
      env: 
        CPPTEST_SCAN_PROJECT_NAME: DevelopSampleProject
      run: |
           & "C:\cpptest\bin\cpptesttrace.exe" make all
           
      working-directory: .\DevelopSampleProject
      
    #- name: Generate Local Settings
      #run: |
        #echo report.format=sarif > ls_2021.properties
        #echo scontrol.git.exec=git.exe >> ls_2021.properties
        #echo scontrol.rep.git.branch=main >> ls_2021.properties
        #echo scontrol.rep.git.url=https\://github.com/cpptest-techmatrix/github-actions-cpptest >> ls_2021.properties
        #echo scontrol.rep.git.workspace=C\:\\actions-runner\\_work\\github-actions-cpptest\\github-actions-cpptest >> ls_2021.properties
    - name: ls_check2
      run: |
         cd DevelopSampleProject
         ls

    - name: Run C++test
      # Use the 'run-cpptest-action' GitHub Action.
      uses: parasoft/run-cpptest-action@1.0.1
      with:
        installDir: 'C:\cpptest'
        compilerConfig: 'gcc_9-64'
        testConfig: 'builtin://MISRA C 2012'
        reportFormat: xml,html,sarif
        input: './DevelopSampleProject/BugDetective/cpptestscan.bdf'
        # For Standard
         # additionalParams: '-property report.custom.extension=sarif -property report.custom.xsl.file=${PARASOFT_SARIF_XSL}'
         # commandLinePattern : ' ${cpptestcli} -data ../workspace -config "${testConfig}" -report "${reportDir}" -bdf "${input}" ${additionalParams} '
        additionalParams: '-localsettings ./DevelopSampleProject/setting.properties'
        commandLinePattern: '${cpptestcli} -J-Duser.language=EN -J-Duser.country=US -data ./ -config "${testConfig}" -report "${reportDir}" -bdf "${input}" ${additionalParams} -publish'
    - name: ls_check
      run: |
         cd reports
         ls

    # Uploads analysis results in the SARIF format, so that they are displayed as GitHub code scanning alerts.
    - name: Upload results (SARIF)
      if: always()
      uses: github/codeql-action/upload-sarif@v1
      env: 
        GITHUB_TOKEN: ${{ secrets.MEHISYA }}
      with:
        sarif_file: reports/report.sarif
    
    # Uploads an archive that includes all report files (.xml, .html, .sarif).
    - name: Archive reports
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Static analysis reports
        path: reports/*.*
